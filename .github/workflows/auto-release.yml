# This GitHub action will create/update a draft release for the current version
# specified in the `pdxinfo` file whenever changes in a source sub-folder.
# (I've tried to cover common source folder names in the `paths` sections below)
#
# The action will attempt to do the following:
# - checkout the branch for which the release should be built
# - setup Babashka, Fennel, and the Playdate SDK
# - run the `bb build-release` task
#     - increments the `buildNumber` in the pdxinfo file
#     - compile Fennel code (if any)
#     - call the Playdate compiler to build the project into an PDX app folder
#     - zip it into a `.pdx.zip` file with the `:release-name` specified in `bb.edn`
# - commit the updated pdxinfo file
# - create/update a draft GitHub Release for the version specified in pdxinfo,
#   and attach the created file to it
#
# If the `bb build-release` part fails, the remaining steps will not be executed.

name: Automated Release

# Controls when the workflow will run
on:
  # this means it can be triggered manually
  workflow_dispatch:
  # trigger on pushes
  push:
    branches:
      - 'main' # use this if you want to trigger whenever main is pushed
      #- 'releases/**' # use this to only trigger when a release branch is pushed
    # only when something in a source folder changed
    paths:
      - 'src/**'
      - 'source/**'
      - 'sources/**'
      - 'Source/**'
      - 'Sources/**'
  # trigger on PRs to main
  pull_request:
    branches:
      - 'main'
    # only when something in a source folder changed
    paths:
      - 'src/**'
      - 'source/**'
      - 'sources/**'
      - 'Source/**'
      - 'Sources/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    permissions:
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 2 # fetching at least 2 commits from the history, so we can check if the head is the initial commit

      - name: Stop if initial commit
        id: init-check
        # compares the commit hashes of the current HEAD and its root. if they're the same it's the initial commit.
        run: |
          cd $GITHUB_WORKSPACE
          CURRENT_COMMIT="$(git rev-parse HEAD)"
          ROOT_COMMIT="$(git rev-list --max-parents=0 HEAD)"
          echo "HEAD: $CURRENT_COMMIT"
          echo "ROOT: $ROOT_COMMIT"
          if [ $CURRENT_COMMIT = $ROOT_COMMIT ]
          then
            echo "Ignoring release action on root commits."
            echo "run=false" >> $GITHUB_OUTPUT
          else
            echo "run=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Babashka
        id: setup-babashka
        if: steps.init-check.outputs.run == 'true'
        uses: turtlequeue/setup-babashka@v1.5.0
        with:
          babashka-version: 1.3.185

      - name: Check for Fennel files
        id: check-fennel-files
        if: steps.init-check.outputs.run == 'true'
        run: |
          echo "is-fennel-project=$(bb fennel?)" >> $GITHUB_OUTPUT

      - name: Setup Homebrew
        id: setup-homebrew
        if: steps.check-fennel-files.outputs.is-fennel-project == 'true'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Fennel
        id: install-fennel
        if: steps.check-fennel-files.outputs.is-fennel-project == 'true'
        run: brew install fennel

      - name: Install Playdate SDK
        id: playdate
        if: steps.init-check.outputs.run == 'true'
        uses: pd-rs/get-playdate-sdk@0.3.3
        with:
          version: latest # possible values: version `x.x.x` or `latest` by default

      - name: Build release
        id: build-release
        if: steps.init-check.outputs.run == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          bb build-release
          if [ $? -gt 0 ]
          then
            exit 1
          fi
          echo "pdxinfo-path=$(bb print-pdxinfo-path)" >> $GITHUB_OUTPUT
          echo "name=$(bb release-name)" >> $GITHUB_OUTPUT
          echo "zip-path=$(bb release-path)" >> $GITHUB_OUTPUT
          echo "version=$(bb pdxinfo version)" >> $GITHUB_OUTPUT
          echo "build-nr=$(bb pdxinfo buildNumber)" >> $GITHUB_OUTPUT
          echo "tag=$(bb automated-release tag)" >> $GITHUB_OUTPUT
          echo "type=$(bb automated-release type)" >> $GITHUB_OUTPUT

      - name: Commit pxdinfo changes
        if: steps.init-check.outputs.run == 'true' && success()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: prepare release `v${{steps.build-release.outputs.version}} b${{steps.build-release.outputs.build-nr}}`
          file_pattern: ${{ steps.build-release.outputs.pdxinfo-path }}

      - name: Locate latest commit
        if: steps.init-check.outputs.run == 'true' && success()
        id: latest-commit
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Upload release
        if: steps.init-check.outputs.run == 'true' && success()
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.build-release.outputs.name }}
          artifacts: ${{ steps.build-release.outputs.zip-path }}
          commit: ${{ steps.latest-commit.outputs.sha }}
          tag: ${{ steps.build-release.outputs.tag }}
          artifactErrorsFailBuild: true
          allowUpdates: true
          draft: ${{ steps.build-release.outputs.type == 'draft' }}
          prerelease: ${{ steps.build-release.outputs.type == 'prerelease' }}
          updateOnlyUnreleased: true
          skipIfReleaseExists: ${{ steps.build-release.outputs.type == 'release' }}
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
