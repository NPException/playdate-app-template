{:min-bb-version "1.3.185"
 :tasks
 {:requires ([clojure.string :as str]
             [babashka.fs :as fs])

  ;; Script Initialization
  :init
  (do (def config {:sources           "./src/"
                   ; Directory relative to `:sources` where Fennel macro modules are placed.
                   ; Fennel files within this directory will not be compiled directly
                   :fennel-macros     "macros/"
                   ; Directory where the compiled Lua and other copied files will be put.
                   ; This is then used as the input directory for the Playdate compiler.
                   :generated-sources "./generated/"
                   ; Lua file that is the program's entry point.
                   ; (note that a "main.fnl" file will be compiled to "main.lua")
                   :main-file         "main.lua"
                   ; Directory where the Playdate compiler will output the final PDX bundle.
                   :build-output      "./builds/"})

      ; detect the operating system, so it can be used where system specific code is necessary
      (def OS (let [os-name (str/lower-case (System/getProperty "os.name"))]
                (cond
                  (str/includes? os-name "windows") :windows
                  (str/includes? os-name "mac") :mac
                  :else :linux)))

      ; check if the Playdate SDK path is known
      (def pd-sdk-path (System/getenv "PLAYDATE_SDK_PATH"))
      (when-not pd-sdk-path
        (println "`PLAYDATE_SDK_PATH` environment variable is not set.")
        (System/exit 1))

      ; check if `fennel` is available
      (when-not (fs/which "fennel")
        (println "`fennel` is not available to this script. Is it installed and on the PATH?")
        (System/exit 1))

      ; TODO: load pdxinfo lines and make values accessible via a function

      ; TODO: Use bundleID from pdxinfo instead of current working directory
      (def pdx-name (str (fs/file-name (fs/cwd)) ".pdx"))

      ; compiles all .fnl files to lua (except macro modules) and copies other files to the generated sources directory
      (defn compile-and-copy []
        (fs/create-dirs (:generated-sources config))
        (let [root (fs/canonicalize (fs/path (:sources config)))
              macros-dir (fs/path root (:fennel-macros config))
              fennel? (fn [path]
                        (= "fnl" (fs/extension path)))]
          (fs/walk-file-tree root
            {:pre-visit-dir
             (fn [path attrs]
               (if (fs/same-file? path macros-dir)
                 :skip-subtree
                 :continue))
             :visit-file
             (fn [path attrs]
               (let [rel-path-str (str (fs/relativize root path))]
                 (if (fennel? path)
                   ; compile fennel file to lua
                   ; TODO: check on linux if this shell command works fine or needs a specific impl
                   (let [compiled-lua (:out (shell
                                              {:dir (:sources config), :out :string}
                                              "fennel" "--compile" rel-path-str))]
                     (if-not compiled-lua
                       :terminate
                       (let [[path-without-extension] (fs/split-ext rel-path-str)
                             lua-file (fs/path (:generated-sources config) (str path-without-extension ".lua"))]
                         (fs/create-dirs (fs/parent lua-file))
                         (fs/write-bytes lua-file (.getBytes (str compiled-lua)))
                         :continue)))
                   ; copy any non-fennel files
                   (let [target-path (fs/path (:generated-sources config) rel-path-str)]
                     (fs/create-dirs (fs/parent target-path))
                     (fs/copy path target-path {:replace-existing true})
                     :continue))))})))

      ; calls the Playdate compiler to build everything in the generated sources folder into a PDX bundle
      (defn invoke-pdc []
        (fs/create-dirs (:build-output config))
        (let [output-path (str (fs/canonicalize (fs/path (:build-output config) pdx-name)))] ; pdc needs the absolute path for some reason
          (shell
            {:dir (:generated-sources config)}
            (str pd-sdk-path "/bin/pdc") "-m" (:main-file config) output-path))))


  ;; Available Babashka Tasks

  clean-compiled
  {:doc   "Deletes the folder generated via the `compile` task."
   :enter (println (str "Deleting `" (:generated-sources config) "`"))
   :task  (fs/delete-tree (:generated-sources config))}


  compile
  {:doc     "Compiles all Fennel files using `fennel` and copies all other files to the `:generated-sources` directory."
   :enter   (println "Compiling Fennel")
   :depends [clean-compiled]
   :task    (compile-and-copy)}


  clean
  {:doc   "Removes the PDX build output folder"
   :enter (println (str "Deleting `" (:build-output config) "`"))
   :task  (fs/delete-tree (:build-output config))}


  create-pdx
  {:doc     "Builds all files in the `:generated-sources` folder into a Playdate PDX app."
   :enter   (println "Building PDX app")
   :depends [clean]
   :task    (invoke-pdc)}


  build
  {:doc "Compiles Fennel and builds everything into a Playdate PDX app."
   :depends [compile create-pdx]}


  copy-pdx-to-sim
  {:doc   "Copies the PDX app to the Playdate simulator's games directory, so it can be selected in the simulator's menu."
   :enter (println "Copying app to simulator")
   :task  (let [source-path (fs/path (:build-output config) pdx-name)
                ; TODO: check if this path works the same under Linux
                target-path (fs/path pd-sdk-path "Disk/Games/User/" pdx-name)]
            (fs/delete-tree target-path)
            (fs/copy-tree source-path target-path))}


  start-sim
  {:doc   "Starts the Playdate simulator with the current app in the build output"
   :enter (println "Starting Playdate Simulator")
   :task  (let [pdx-path (str (fs/path (:build-output config) pdx-name))
                ; TODO: check if this path works the same under Linux
                sim-path (str (fs/path pd-sdk-path "bin/PlaydateSimulator"))]
            (shell sim-path pdx-path))}


  build-and-sim
  {:doc "Calls the `build` task and then starts the Playdate simulator."
   :depends [build start-sim]}


  build-copy-sim
  {:doc "Calls the `build` and `copy-pdx-to-sim` tasks, then starts the Playdate Simulator."
   :depends [build copy-pdx-to-sim start-sim]}


  }}

; TODO: - inc-build-number task
;       - build-release task [compile-fnl bump-build build-pdx], then zip up the folder

; TODO (maybe): - add github action to trigger release (for latest tag on main?)
