{:min-bb-version "1.3.185"
 :tasks
 {:init           (do (def src-dir "./src/")
                      ; directory relative to `src-dir` where Fennel macro modules are placed. Fennel files within this directory will not be compiled directly
                      (def fennel-macros-dir "macros/")
                      (def generated-src-dir "./generated/")
                      ; Lua file that is the program's entry point. (note that a "main.fnl" file will be compiled to "main.lua")
                      (def main-file "main.lua")
                      ; output directory
                      (def build-dir "./builds/")
                      ; detect the operating system, so it can be used where system specific code is necessary
                      (def OS (let [os-name (str/lower-case (System/getProperty "os.name"))]
                                (cond
                                  (str/includes? os-name "windows") :windows
                                  (str/includes? os-name "mac") :mac
                                  :else :linux)))
                      ; check if `fennel` is available
                      (when (nil? (fs/which "fennel"))
                        (println "`fennel` is not available to this script. Is it installed and on the PATH?")
                        (System/exit 1))
                      ; TODO: load pdxinfo lines and make values accessible via a function
                      )


  :requires       ([clojure.string :as str]
                   [babashka.fs :as fs])


  clean-generated {:doc   "Deletes the generated source files."
                   :enter (println (str "Deleting `" generated-src-dir "`"))
                   :task  (fs/delete-tree generated-src-dir)}


  compile-fnl     {:doc   "Compiles all Fennel source files using `fennel`"
                   :enter (println "Compiling Fennel")
                   :depends [clean-generated]
                   :task  (do (fs/create-dirs generated-src-dir)
                              (let [root (fs/canonicalize (fs/path src-dir))
                                    macros-dir (fs/path root fennel-macros-dir)
                                    fennel? (fn [path]
                                              (= "fnl" (fs/extension path)))]
                                (fs/walk-file-tree root
                                  {:pre-visit-dir
                                   (fn [path attrs]
                                     (if (fs/same-file? path macros-dir)
                                       :skip-subtree
                                       :continue))
                                   :visit-file
                                   (fn [path attrs]
                                     (let [rel-path-str (str (fs/relativize root path))]
                                       (if (fennel? path)
                                         ; compile fennel file to lua
                                         ; TODO: check on linux if this shell command works fine or needs a specific impl
                                         (let [compiled-lua (:out (shell
                                                                    {:dir src-dir :out :string}
                                                                    "fennel" "--compile" rel-path-str))]
                                           (if-not compiled-lua
                                             :terminate
                                             (let [[path-without-extension] (fs/split-ext rel-path-str)
                                                   lua-file (fs/path generated-src-dir (str path-without-extension ".lua"))]
                                               (fs/create-dirs (fs/parent lua-file))
                                               (fs/write-bytes lua-file (.getBytes (str compiled-lua)))
                                               :continue)))
                                         ; copy any non-fennel files
                                         (let [target-path (fs/path generated-src-dir rel-path-str)]
                                           (fs/create-dirs (fs/parent target-path))
                                           (fs/copy path target-path {:replace-existing true})
                                           :continue))))})))}


  clean           {:doc   "Removes the PDX build output folder"
                   :enter (println (str "Deleting `" build-dir "`"))
                   :task  (fs/delete-tree build-dir)}


  build-pdx       {:doc     "Builds all Lua files and assets into a Playdate PDX package."
                   :enter   (println "Building PDX package")
                   :depends [clean]
                   :task    (do (fs/create-dirs build-dir)
                                (let [pd-sdk-path (System/getenv "PLAYDATE_SDK_PATH")
                                      ; TODO: Use bundleID from pdxinfo instead of current working directory
                                      output-path (str (fs/canonicalize (fs/path build-dir (fs/file-name (fs/cwd)))))]
                                  (shell
                                    {:dir generated-src-dir}
                                    (str pd-sdk-path "/bin/pdc") "-m" main-file output-path)))}

  }}

; TODO: - inc-build-number task
;       - build-release task [compile-fnl bump-build build-pdx], then zip up the folder
;       - start-simulator task

; TODO (maybe): - add github action to trigger release (for latest tag on main?)
